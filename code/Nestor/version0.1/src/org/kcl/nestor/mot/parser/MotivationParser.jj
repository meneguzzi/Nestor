/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
}
PARSER_BEGIN(MotivationParser)
package org.kcl.nestor.mot.parser;

import jason.asSyntax.ArithExpr;
import jason.asSyntax.ListTerm;
import jason.asSyntax.ListTermImpl;
import jason.asSyntax.Literal;
import jason.asSyntax.LogExpr;
import jason.asSyntax.LogicalFormula;
import jason.asSyntax.NumberTerm;
import jason.asSyntax.NumberTermImpl;
import jason.asSyntax.Pred;
import jason.asSyntax.RelExpr;
import jason.asSyntax.StringTerm;
import jason.asSyntax.StringTermImpl;
import jason.asSyntax.Term;
import jason.asSyntax.Trigger;
import jason.asSyntax.UnnamedVar;
import jason.asSyntax.VarTerm;
import jason.asSyntax.ArithExpr.ArithmeticOp;
import jason.asSyntax.LogExpr.LogicalOp;
import jason.asSyntax.RelExpr.RelationalOp;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;

import org.kcl.nestor.mot.GoalGenerationFunction;
import org.kcl.nestor.mot.IntensityUpdateFunction;
import org.kcl.nestor.mot.MitigationFunction;
import org.kcl.nestor.mot.Motivation;
import org.kcl.nestor.mot.MotivationFactory;

public class MotivationParser {
	protected MotivationFactory motivationFactory = MotivationFactory.getMotivationFactory();
	protected List<Motivation> motivations = new ArrayList<Motivation>();
	
  public static void main(String args[]) throws ParseException, FileNotFoundException {
  	File inputFile = null;
  	if(args.length > 0 ) {
  		inputFile = new File(args[0]);
  	} else {
  		System.err.println("Must specify an input file.");
  		System.err.println("Exiting.");
  	}
  	if(inputFile.exists()) {
  		FileInputStream inputStream = new FileInputStream(inputFile);
  		MotivationParser parser = new MotivationParser(inputStream);
  		
		System.out.print("Reading input...");
    	List<Motivation> motivations = parser.parse();
		if(motivations != null) {
		   	System.out.println("Done");
		   	System.out.println(parser);
		} else {
			System.out.println("Error");
		}
  	} else {
  		System.err.println("Input file '"+inputFile+"' does not exist.");
  		System.err.println("Exiting.");
  	}
  }
  
  public static List<Motivation> parseFile(String filename) throws Exception {
  	FileInputStream inputStream = new FileInputStream(filename);
  	return parseStream(inputStream);
  }
  
  public static List<Motivation> parseStream(InputStream inputstream) throws Exception {
	MotivationParser parser = new MotivationParser(inputstream);
	List<Motivation> mots = parser.parse();
	//logger.info(parser.toString());
	return mots;
  }
  
  public String toString(){
  	StringBuffer sb = new StringBuffer();
  	for(Motivation motivation : motivations) {
		sb.append(motivation);
		sb.append(System.getProperty("line.separator"));
	}
	return sb.toString();
  }
}
PARSER_END(MotivationParser)

SKIP :
{
 	" "
|	"\r"
|	"\t"
|	"\n"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
TOKEN : /* Reserved Words - These go first*/
{
	<MOTIVATION: "Motivation" >
|	<THRESHOLD: "Threshold" >
|	<INTENSITY_UPDATE: "IntensityUpdate" >
|	<GOAL_GENERATION: "GoalGeneration" >
|	<MITIGATION: "Mitigation" >
}
TOKEN : {
// Predefined
  <TK_TRUE: "true">
| <TK_FALSE: "false">
| <TK_NOT:  "not">
| <TK_NEG:  "~">
| <TK_INTDIV: "div">
| <TK_INTMOD: "mod">

// special chars
| <TK_LABEL_AT: "@">

// Numbers
|   <NUMBER: ["0"-"9"] (["0"-"9"])*
          | (["0"-"9"])* "." (["0"-"9"])+ (<EXPONENT>)?
          | (["0"-"9"])+ <EXPONENT> >
|  <EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
// Strings
|  <STRING: "\"" ( ~["\"","\\","\n","\r"]
                 | "\\" ( ["n","t","b","r","f","\\","\'","\""]
                        | ["0"-"7"] (["0"-"7"])?
                        | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">

// Identifiers
|  <ATOM      : (<LC_LETTER> | "." <CHAR>) (<CHAR> | "." <CHAR>)*>
|  <VAR       :  <UP_LETTER> (<CHAR>)*>
|  <UNNAMEDVAR:  "_" (["0"-"9"])* >
|  <CHAR      : (<LETTER> | <DIGIT> | "_" | "$")>
|  <LETTER    : ( <LC_LETTER> | <UP_LETTER> )>
|  <LC_LETTER : ["a"-"z"]>
|  <UP_LETTER : ["A"-"Z"]>
|  <DIGIT     : ["0"-"9"]>
}

List<Motivation> parse() : {Motivation m;}
{
  ( 
  	m = motivation()	{ motivations.add(m); }
  )+ 
  					   { return motivations; }
//| ";"	    	  { return 1; }
}

Motivation motivation() : 							{Token t; String motivationName; Motivation motivation;}
{
	<MOTIVATION> 
	t=identifier() 									{motivationName = new String(t.image);}
	"{"
		motivation = motivationBody(motivationName)
	"}"												{return motivation;}
}

Motivation motivationBody(String motivationName) : 	{int threshold;}
{													{IntensityUpdateFunction iuFunction;}
													{GoalGenerationFunction ggFunction;}
													{MitigationFunction mFunction;}
	threshold = threshold() ";"						{}
	iuFunction = intensityUpdate()					{}
	ggFunction = goalGeneration()					{}
	mFunction = mitigation()						{}
													{return motivationFactory.createMotivation(motivationName, threshold, iuFunction,ggFunction,mFunction);}
}

int threshold() : 									{Token token;}
{
	<THRESHOLD> "=" token=<NUMBER> 					{return Integer.parseInt(token.image);}
}

Token identifier() : 								{Token token;}
{
	token=<ATOM>									{return token;}
|	token=<VAR>										{return token;}
}

String classname() : 								{Token token; String s;}
{
	token=identifier()   							{s = new String(token.image);}
	/*("."				 							{s+=".";}
	token=identifier())* 							{s+=token.image;}*/
						 							{return s;}
}

IntensityUpdateFunction intensityUpdate() : 		{String classname;}
{													{IntensityUpdateFunction function;}
													{Hashtable<LogicalFormula,NumberTerm> table = new Hashtable<LogicalFormula,NumberTerm>();}
	<INTENSITY_UPDATE> classname=classname() 		{function = motivationFactory.createIntensityUpdateFunction(classname);}
	"{"
	( 
		beliefToIntegerMapping(table) ";"			{for (LogicalFormula formula : table.keySet()) {
														function.addBeliefToIntegerMapping(formula, table.get(formula));
													}}
	)*
	"}"												{return function;}
}

void beliefToIntegerMapping(Hashtable<LogicalFormula,NumberTerm> table): {LogicalFormula formula;Object value;}
{
	(formula= log_expr()
	 "->" 
	 value=arithm_expr())  							{table.put(formula,(NumberTerm)value);}
}

GoalGenerationFunction goalGeneration() : 			{String classname;}
{													{GoalGenerationFunction function;}
													{Hashtable<LogicalFormula,Trigger> table = new Hashtable<LogicalFormula,Trigger>();}
	<GOAL_GENERATION> classname=classname() 		{function = motivationFactory.createGoalGenerationFunction(classname);}
	"{"
	(
		beliefToTriggerMapping(table) ";"			{for (LogicalFormula formula : table.keySet()) {
														function.addBeliefToGoalMapping(formula, table.get(formula));
													}}
	)*
	"}"												{return function;}
}

void beliefToTriggerMapping(Hashtable<LogicalFormula,Trigger> table) : {LogicalFormula formula; Trigger t;}
{
	(formula=log_expr()
	 "->"
	 t=trigger()) 									{table.put(formula,t);}
}

MitigationFunction mitigation() : 					{String classname;}
{													{MitigationFunction function;}
													{Hashtable<LogicalFormula,NumberTerm> table = new Hashtable<LogicalFormula,NumberTerm>();}
	<MITIGATION> classname=classname() 				{function = motivationFactory.createMitigationFunction(classname);}
	"{"
	(
		beliefToIntegerMapping(table) ";"			{for (LogicalFormula formula : table.keySet()) {
														function.addBeliefToIntegerMapping(formula, table.get(formula));
													}}
	)*
	"}"												{return function;}
}
/* ************************************************************************* */
/* Definitions stolen from Jason's parser*/
/* Trigger */
Trigger trigger() : { 
               		boolean teType;
			    	byte    teGoal = Trigger.TEBel;
				 	Literal F; 
               }
{
  ( "+"        { teType = Trigger.TEAdd; }
  | "-"        { teType = Trigger.TEDel; }
  )
  
  [ ( "!"      { teGoal = Trigger.TEAchvG; }
    | "?"      { teGoal = Trigger.TETestG; }
    )
  ]
  
  ( F=literal()
  | F=var()
  )            { return new Trigger(teType,teGoal,F); }
}

/* Literal */
Literal literal() :  { Pred F; Token k; boolean type = Literal.LPos; }
{
  ( ( [ <TK_NEG>              { type = Literal.LNeg; }
      ]
      F=atom()                { return new Literal(type,F); }
    )
  | k=<TK_TRUE>               { return Literal.LTrue; } 
  | k=<TK_FALSE>              { return Literal.LFalse; } 
  )
}

/* Annotated Atomic Formulae */
Pred atom() :       { Token K; Pred p = new Pred(); Term t; List l; ListTerm lt;}
{
  K=<ATOM>          { p.setFunctor(K.image); } 
  [
      "(" l = terms() 
      ")"           { p.addTerms(l); }
  ]
  [ 
      lt = list()   { p.setAnnots(lt); }
  ] 
  { return p; }
}


/* List of terms */
List terms() : { List listTerms = new ArrayList(); Term v; }
{
  v=term()             { listTerms.add(v); } 
  ( "," v=term()       { listTerms.add(v); }
  )* 
                       { return listTerms; }
}


Term term() :       { Term u; Object o; }
{
  ( u=literal()     
  | u=list()        
  | o=arithm_expr() { return (NumberTerm)o; }
  | u=string()      
  )
  { return u; }
}


ListTermImpl list() : { ListTermImpl lt = new ListTermImpl(); ListTerm last; 
                        Token K; Term f; }
{
  "["
  [
  f=term()                { last = lt.append(f); }
  ( "," f=term()          { last = last.append(f); }
  )*
  [ "|"  ( K=<VAR>        { last.setNext(new VarTerm(K.image)); }
         | K=<UNNAMEDVAR> { last.setNext(new UnnamedVar()); }
         | f=list()       { last = last.concat((ListTerm)f);	   }
         )           
  ]
  ]
  "]"                     { return lt; } 
}


/* logical expression */

LogicalFormula log_expr() :       
                         { LogicalFormula t1, t2; }
{					
   t1 = log_expr_trm()         
[  "|" t2 = log_expr()   { return new LogExpr(t1,LogicalOp.or,t2); } ]
                         { return t1; }
}

LogicalFormula log_expr_trm() : 
                           { LogicalFormula t1, t2; }
{
   t1 = log_expr_factor()    
[  "&" t2 = log_expr_trm() { return new LogExpr(t1,LogicalOp.and,t2); } ]
                           { return t1; }
}

LogicalFormula log_expr_factor():             
                                    { LogicalFormula t; }
{
(  
  <TK_NOT> t = log_expr_factor()    { return new LogExpr(LogicalOp.not,(LogicalFormula)t); } 
 | 
  t = rel_expr()                    { return t; } 
)
}


/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
LogicalFormula rel_expr() :               
                                          {  Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
                                           }
{
    (   op1 = arithm_expr()                
      | op1 = literal()
      | op1 = string()
    )
                     
    [
       ( "<"                               { operator = RelationalOp.lt; } 
       | "<="                              { operator = RelationalOp.lte; } 
       | ">"                               { operator = RelationalOp.gt; } 
       | ">="                              { operator = RelationalOp.gte; } 
       | "=="                              { operator = RelationalOp.eq; } 
       | "\\=="                            { operator = RelationalOp.dif; } 
       | "="                               { operator = RelationalOp.unify; } 
       | "=.."                             { operator = RelationalOp.literalBuilder; } 
       )

       (   op2 = arithm_expr()        
         | op2 = literal()
         | op2 = string()               
         | op2 = list()
       )

                                           { return new RelExpr((Term)op1, operator, (Term)op2); }
    ]
                                           { return (LogicalFormula) op1; }
}


/* arithmetic expression */
Object arithm_expr() :        { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_trm()     { op = ArithmeticOp.none; }
[  ( "+"                      { op = ArithmeticOp.plus;} 
   | "-"                      { op = ArithmeticOp.minus;}
   )
   t2 = arithm_expr()         { if (!(t1 instanceof NumberTerm)) {
                                   throw new ParseException("ArithExpr: first operand is not numeric or variable.");
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   throw new ParseException("ArithExpr: second operand is not numeric or variable.");
                                }
                                return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                              }
]                             { return t1; }
}

Object arithm_expr_trm() :      { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_factor()    { op = ArithmeticOp.none; }
[  ( "*"                        { op = ArithmeticOp.times; } 
   | "/"                        { op = ArithmeticOp.div; }
   | <TK_INTDIV>                { op = ArithmeticOp.intdiv; }
   | <TK_INTMOD>                { op = ArithmeticOp.mod; }
   )
   t2 = arithm_expr_trm()       { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException("ArithTerm: first operand is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException("ArithTerm: second operand is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}

Object arithm_expr_factor():   
                                { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_simple()    { op = ArithmeticOp.none; }
[  ( "**"                       { op = ArithmeticOp.pow; }
   )
   t2 = arithm_expr_factor()    { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException("ArithFactor: first operand is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException("ArithFactor: second operand is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}


Object arithm_expr_simple():    
                                { Token K; Object t; VarTerm v; }
{
 ( K = <NUMBER>                 { return new NumberTermImpl(K.image); }
 | "-" t = arithm_expr_simple() { if (!(t instanceof NumberTerm)) {
                                    throw new ParseException("operator '-' applied to argument not numeric or variable.");
                                  }
                                  return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t); 
                                }
 | "(" t = log_expr() ")"       { return t; }
 | v = var()                    { return v; }
 )
}


VarTerm var():      { Token K; VarTerm v; ListTerm lt; }
{
 ( K = <VAR>        { v = new VarTerm(K.image); }
 | K = <UNNAMEDVAR> { v = new UnnamedVar(); }
 )
 [ 
   lt = list()      { v.setAnnots(lt); }
 ]
                    { return v; }
}

StringTerm string():{ Token k; }
{
  k = <STRING>      { return new StringTermImpl(k.image.substring(1,k.image.length()-1)); } 
}