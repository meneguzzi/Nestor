Motivation keepBattery {
	Threshold = 10;
	
	IntensityUpdate org.kcl.nestor.mot.impl.IntensityUpdateFunctionImpl {
		at(X,Y) [source(percept)] 
		& chargeStation(Cx,Cy) 
		& rover.act.distance(X,Y,Cx,Cy,Dist) // If we detect we are too far 
		& battery(Batt) [source(percept)]    // from the charge station,
		& (Dist >= Batt) -> 100;             // increase threshold
		
		battery(Batt) [source(percept)]
		& at(X,Y)
		& not moving
		& waypoint(Wx,Wy)                    // Similar condition to above, 
		& rover.act.distance(X,Y,Wx,Wy,DistW)// but now we want to charge
		& DistW >= Batt -> 10;               // before going to the waypoint
	}
	
	GoalGeneration org.kcl.nestor.mot.impl.GoalGenerationFunctionImpl {
		chargeStation(Cx,Cy) -> +!recharge(Cx,Cy);
	}
	
	Mitigation org.kcl.nestor.mot.impl.MitigationFunctionImpl {
		battery(40) -> -1000;
	}
}

Motivation navigate {
	Threshold = 10;
	IntensityUpdate org.kcl.nestor.mot.impl.IntensityUpdateFunctionImpl {
		waypoint(Wx,Wy) [source(self)] // If there's a waypoint, 
		& not charging -> 5;           // we want to go there
		
		battery(Batt) [source(percept)]
		& at(X,Y)                      // But if we don't have enough
		& waypoint(Wx,Wy)              // battery to do, we'd better stay
		& rover.act.distance(X,Y,Wx,Wy,Dist)
		& Dist >= Batt -> -10;
	}
	
	GoalGeneration org.kcl.nestor.mot.impl.GoalGenerationFunctionImpl {
		not moving 
		& not charging 
		& waypoint(X,Y) [source(self)] -> +!goToWaypoint(waypoint(X,Y));
	}
	
	Mitigation org.kcl.nestor.mot.impl.MitigationFunctionImpl {
		not moving & //not moving is to ensure that the plan
		at(X,Y) &    //has been completed before mitigating
		waypoint(X,Y) -> -1000;
	}
}

Motivation finish {
	Threshold = 10;
	
	IntensityUpdate org.kcl.nestor.mot.impl.IntensityUpdateFunctionImpl {
		not waypoint(_,_) [source(self)] 
		& endSimulation [source(self)] -> 10;
	}
	
	GoalGeneration org.kcl.nestor.mot.impl.GoalGenerationFunctionImpl {
		endSimulation [source(self)] -> +!endSimulation;
	}
	
	Mitigation org.kcl.nestor.mot.impl.MitigationFunctionImpl {
		//true -> -100;
	}
}