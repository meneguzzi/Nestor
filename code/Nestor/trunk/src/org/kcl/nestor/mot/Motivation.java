/**
 * 
 */
package org.kcl.nestor.mot;

import jason.asSemantics.Agent;
import jason.asSemantics.Unifier;
import jason.asSyntax.Trigger;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.kcl.nestor.mot.log.MotivationLog;
import org.kcl.nestor.mot.log.MotivationLogFactory;

/**
 * @author  Felipe Rech Meneguzzi
 */
public class Motivation {
	protected static final Logger logger = Logger.getLogger(Motivation.class.getName());

	/**
	 * The class to log the evolution of an agent's motivation.
	 * XXX Perhaps this is not the most appropriate way of logging stuff, we shall see
	 */
	protected MotivationLog motivationLog = null;
	
	/**
	 * The identifier for this motivation.
	 */
	protected final String motivationName;
	
	/**
	 * The current intensity for this motivation.
	 */
	protected int motivationIntensity;
	
	/**
	 * The threshold value after which goals will be generated by this motivation.
	 */
	protected int motivationThreshold;
	
	/**
	 * A strategy object to which the intensity update function is delegated.
	 */
	protected IntensityUpdateFunction intensityUpdateFunction;
	
	/**
	 * A strategy object to which the goal generation function is delegated.
	 */
	protected GoalGenerationFunction goalGenerationFunction;
	
	/**
	 * A stategy object to which the intention mitigation function is delegated.
	 */
	protected MitigationFunction mitigationFunction;
	
	public static final List<Trigger> emptyList = new ArrayList<Trigger>(0);
	
	/**
	 * Creates a motivation with this name 
	 * @param motivationName
	 */
	public Motivation(String motivationName) {
		this.motivationName = motivationName;
		this.motivationLog = MotivationLogFactory.getInstance().newMotivationLog(this);
	}
	
	/**
	 * Creates a new motivation with a given name
	 * <code>IntensityUpdateFunction</code>,
	 * <code>GoalGenerationFunction</code>, and
	 * <code>MitigationFunction</code>.
	 * @param motivationName
	 * @param intensityUpdateFunction
	 * @param goalGenerationFunction
	 * @param mitigationFunction
	 */
	public Motivation(String motivationName, 
			int threshold,
			IntensityUpdateFunction intensityUpdateFunction,
			GoalGenerationFunction goalGenerationFunction,
			MitigationFunction mitigationFunction) {
		this(motivationName);
		this.motivationThreshold = threshold;
		this.intensityUpdateFunction = intensityUpdateFunction;
		this.goalGenerationFunction = goalGenerationFunction;
		this.mitigationFunction = mitigationFunction;
	}

	/**
	 * @return  the motivationIntensity
	 * @uml.property  name="motivationIntensity"
	 */
	public int getMotivationIntensity() {
		return motivationIntensity;
	}

	/**
	 * @return  the motivationThreshold
	 * @uml.property  name="motivationThreshold"
	 */
	public int getMotivationThreshold() {
		return motivationThreshold;
	}

	/**
	 * @return  the motivationName
	 * @uml.property  name="motivationName"
	 */
	public String getMotivationName() {
		return motivationName;
	}

	/**
	 * Updates this motivation's intensity based on the current agent beliefs,
	 * and returns whether or not this motivations's threshold has been reached.
	 * 
	 * @param agent A reference to the agent's <code>BeliefBase</code>
	 * @param unif TODO
	 * @return Whether or not this motivation's threshold has been reached.
	 */
	public boolean updateIntensity(Agent agent, Unifier unif) {
		this.motivationIntensity+=this.intensityUpdateFunction.updateIntensity(agent, unif);
		motivationIntensity = (motivationIntensity > 0) ? motivationIntensity : 0;
		
		logger.fine("Motivation '"+motivationName+"' intensity is "+motivationIntensity);
		
		/*********************************************************/
		motivationLog.addMotivationLevel(this.motivationIntensity);
		if(motivationIntensity >= motivationThreshold) {
			motivationLog.addThresholdExceededEvent();
		}
		/*********************************************************/
		
		return motivationIntensity >= motivationThreshold;
	}
	
	/**
	 * Generates the goals associated with this motivation.
	 * 
	 * @param agent A reference to the agent's <code>BeliefBase</code>
	 * @param unif TODO
	 * @return A list of new goals for the agent to accomplish 
	 * (Actually <code>Triggers</code>)
	 */
	public List<Trigger> generateGoals(Agent agent, Unifier unif) {
		if(this.motivationIntensity >= motivationThreshold) {
			//logger.info("Threshold exceeded, generating goals");
			List<Trigger> generatedGoals = this.goalGenerationFunction.generateGoals(agent, unif);
			/***************************************************/
			motivationLog.addTriggeredGoals(generatedGoals);
			/***************************************************/
			return generatedGoals;
		}
		return emptyList;
	}
	
	/**
	 * The function invoked when the goals associated with this motivation are 
	 * achieved.
	 * @param agent A reference to the agent's <code>BeliefBase</code>
	 * @param unif TODO
	 * @return Whether or not this motivation has been mitigated
	 */
	public boolean mitigate(Agent agent, Unifier unif) {
		int mitigation = this.mitigationFunction.mitigate(agent, unif);
		//if the mitigation value is 0, the agent has not mitigated it.
		if(mitigation == 0) {
			return false;
		}
		
		this.motivationIntensity += mitigation;
		motivationIntensity = (motivationIntensity > 0) ? motivationIntensity : 0;
		
		/***************************************************/
		motivationLog.addMitigationPoint(mitigation);
		/***************************************************/
		
		return true;
	}
	
	public GoalGenerationFunction getGoalGenerationFunction() {
		return goalGenerationFunction;
	}

	public IntensityUpdateFunction getIntensityUpdateFunction() {
		return intensityUpdateFunction;
	}

	public MitigationFunction getMitigationFunction() {
		return mitigationFunction;
	}
	
	public MotivationLog getMotivationLog() {
		return this.motivationLog;
	}

	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Motivation ");
		sb.append(this.motivationName);
		sb.append("{");
		
		sb.append(System.getProperty("line.separator"));
		sb.append("   Intensity = ");
		sb.append(this.motivationIntensity);
		
		sb.append(System.getProperty("line.separator"));
		sb.append("   Threshold = ");
		sb.append(this.motivationThreshold);
		
		sb.append(System.getProperty("line.separator"));
		sb.append("   ");
		sb.append(this.intensityUpdateFunction.toString());
		
		sb.append(System.getProperty("line.separator"));
		sb.append("   ");
		sb.append(this.goalGenerationFunction.toString());
		
		sb.append(System.getProperty("line.separator"));
		sb.append("   ");
		sb.append(this.mitigationFunction.toString());
		
		sb.append(System.getProperty("line.separator"));
		sb.append("}");
		return sb.toString();
	}
}
